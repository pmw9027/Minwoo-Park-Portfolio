{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 참고 : http://solarisailab.com/archives/303\n",
    "\n",
    "# 3분 딥러닝 텐서플로맛"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "이제 TensorFlow를 이용해서 본격적으로 머신 러닝 알고리즘들을 만들어 보자.\n",
    "\n",
    "가장 먼저 만들 프로그램은 MNIST 문자 인식 프로그램이다.\n",
    "\n",
    "MNIST[1]이란 28×28 크기의 0~9사이의 숫자 이미지와 이에 해당하는 레이블(Label)로 구성된 데이터베이스이다.\n",
    "\n",
    "MNIST 데이터베이스는 데이터의 양이 적당하고 문제 정의가 간단하여 머신 러닝을 공부하는 사람들이 입문용으로 자주 사용한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/gif": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import Image\n",
    "Image(filename='mnist_2.gif') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "MNIST 이미지 x가 입력으로 들어오면 그 이미지가 무슨 숫자인지를 해석해서 y로 출력해주는 가장 기본적인 이미지 인식 프로그램이다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import Image\n",
    "Image(filename='MNIST1.png') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "사람에게는 이 문제가 매우 간단해 보이지만, 컴퓨터에게는 쉽지 않은 문제이다. 왜냐하면 사람은 0이 그려진 이미지를 보면 이것이 0이라는 추상적인 의미를 자동적으로 해석해내지만 컴퓨터에게 0이 그려진 이미지는 단지 픽셀 밝기 값(Intensity)으로 구성된 2차원 행렬일 뿐이다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From <ipython-input-3-f08b5881daf6>:11: read_data_sets (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n",
      "WARNING:tensorflow:From C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\datasets\\mnist.py:260: maybe_download (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please write your own downloading logic.\n",
      "WARNING:tensorflow:From C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\datasets\\mnist.py:262: extract_images (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use tf.data to implement this functionality.\n",
      "Extracting ./mnist/data/train-images-idx3-ubyte.gz\n",
      "WARNING:tensorflow:From C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\datasets\\mnist.py:267: extract_labels (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use tf.data to implement this functionality.\n",
      "Extracting ./mnist/data/train-labels-idx1-ubyte.gz\n",
      "WARNING:tensorflow:From C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\datasets\\mnist.py:110: dense_to_one_hot (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use tf.one_hot on tensors.\n",
      "Extracting ./mnist/data/t10k-images-idx3-ubyte.gz\n",
      "Extracting ./mnist/data/t10k-labels-idx1-ubyte.gz\n",
      "WARNING:tensorflow:From C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\datasets\\mnist.py:290: DataSet.__init__ (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "\n",
    "from tensorflow.examples.tutorials.mnist import input_data\n",
    "\n",
    "mnist = input_data.read_data_sets(\"./mnist/data/\", one_hot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "learning_rate = 0.01\n",
    "\n",
    "training_epoch = 10\n",
    "\n",
    "batch_size = 100\n",
    "\n",
    "n_hidden = 256\n",
    "\n",
    "n_input = 28*28"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 비지도 학습이므로 Y값이 없다\n",
    "\n",
    "X = tf.placeholder(tf.float32, [None, n_input])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "W_encode = tf.Variable(tf.random_normal([n_input, n_hidden]))\n",
    "\n",
    "b_encode = tf.Variable(tf.random_normal([n_hidden]))\n",
    "\n",
    "encoder = tf.nn.sigmoid(tf.add(tf.matmul(X, W_encode), b_encode))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 디코더\n",
    "\n",
    "W_decode = tf.Variable(tf.random_normal([n_hidden, n_input]))\n",
    "\n",
    "b_decode = tf.Variable(tf.random_normal([n_input]))\n",
    "\n",
    "decoder = tf.nn.sigmoid(tf.add(tf.matmul(encoder, W_decode), b_decode))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\ops\\math_grad.py:1205: add_dispatch_support.<locals>.wrapper (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.where in 2.0, which has the same broadcast rule as np.where\n",
      "WARNING:tensorflow:From C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\rmsprop.py:119: calling Ones.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Call initializer instance with the dtype argument instead of passing it to the constructor\n"
     ]
    }
   ],
   "source": [
    "cost = tf.reduce_mean(tf.pow(X - decoder, 2))\n",
    "\n",
    "optimizer = tf.train.RMSPropOptimizer(learning_rate).minimize(cost)\n",
    "\n",
    "\n",
    "\n",
    "init = tf.global_variables_initializer() \n",
    "\n",
    "sess = tf.Session() \n",
    "\n",
    "sess.run(init) \n",
    "\n",
    "total_batch = int(mnist.train.num_examples / batch_size) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch:  0001 Avg. cost= 0.189248\n",
      "Epoch:  0002 Avg. cost= 0.051107\n",
      "Epoch:  0003 Avg. cost= 0.040110\n",
      "Epoch:  0004 Avg. cost= 0.035328\n",
      "Epoch:  0005 Avg. cost= 0.033008\n",
      "Epoch:  0006 Avg. cost= 0.030956\n",
      "Epoch:  0007 Avg. cost= 0.029871\n",
      "Epoch:  0008 Avg. cost= 0.028840\n",
      "Epoch:  0009 Avg. cost= 0.027118\n",
      "Epoch:  0010 Avg. cost= 0.025687\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x144 with 10 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for epoch in range(training_epoch): \n",
    "\n",
    "    total_cost = 0 \n",
    "    for i in range(total_batch): \n",
    "        batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n",
    "        _, cost_val = sess.run([optimizer, cost], feed_dict={X: batch_xs}) \n",
    "        total_cost += cost_val \n",
    "\n",
    "\n",
    "    print('Epoch: ', '%04d' % (epoch + 1), 'Avg. cost=', '{:4f}'.format(total_cost / total_batch))\n",
    "\n",
    "\n",
    "sample_size = 5\n",
    "\n",
    "samples = sess.run(decoder, feed_dict={X: mnist.test.images[:sample_size]})\n",
    "\n",
    "\n",
    "\n",
    "fig, ax = plt.subplots(2, sample_size, figsize=(sample_size, 2))\n",
    "\n",
    "\n",
    "\n",
    "for i in range(sample_size):\n",
    "\n",
    "    ax[0][i].set_axis_off()\n",
    "\n",
    "    ax[1][i].set_axis_off()\n",
    "\n",
    "    ax[0][i].imshow(np.reshape(mnist.test.images[i], (28, 28))) # 원본\n",
    "\n",
    "    ax[1][i].imshow(np.reshape(samples[i], (28, 28))) # 신경망이 생성한 이미지\n",
    "\n",
    "\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 텐서플로우(TensorFlow)를 이용해서 MNIST 숫자 분류를 위한 Stacked Autoencoders 구현해보기\n",
    "\n",
    "## Autoencoder는 Unsupervised Learning을 위한 Neural Networks 구조 중 하나로, Hidden Layer에 Input 데이터를 압축적으로 저장함으로써 원본 데이터의 특징(Feature)을 효과적으로 추출할 수 있는 기법이다. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extracting MNIST_data/train-images-idx3-ubyte.gz\n",
      "Extracting MNIST_data/train-labels-idx1-ubyte.gz\n",
      "Extracting MNIST_data/t10k-images-idx3-ubyte.gz\n",
      "Extracting MNIST_data/t10k-labels-idx1-ubyte.gz\n"
     ]
    }
   ],
   "source": [
    "# -*- coding: utf-8 -*-\n",
    "\n",
    "# MNIST 숫자 분류를 위한 Stacked AutoEncoder 예제 \n",
    "\n",
    "# 절대 임포트 설정\n",
    "from __future__ import division, print_function, absolute_import\n",
    "\n",
    "# 필요한 라이브러리들을 임포트\n",
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# MNIST 데이터를 다운로드 한다.\n",
    "from tensorflow.examples.tutorials.mnist import input_data\n",
    "mnist = input_data.read_data_sets(\"MNIST_data/\", one_hot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 파라미터 설정\n",
    "learning_rate_RMSProp = 0.01\n",
    "learning_rate_Gradient_Descent = 0.5\n",
    "training_epochs = 400     # epoch 횟수 (iteration)\n",
    "softmax_classifier_iterations = 1000 # Softmax Classifier iteration 횟수 \n",
    "batch_size = 256          \n",
    "display_step = 1        # 몇 Step마다 log를 출력할지 결정한다.\n",
    "examples_to_show = 10   # reconstruct된 이미지 중 몇개를 보여줄지를 결정한다. \n",
    "n_hidden_1 = 200        # 첫번째 히든레이어의 노드 개수 \n",
    "n_hidden_2 = 200        # 두번째 히든레이어의 노드 개수 \n",
    "n_input = 784           # MNIST 데이터 input (이미지 크기: 28*28)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Stacked Autoencoder를 생성한다.\n",
    "def build_autoencoder():\n",
    "    # 히든 레이어 1을 위한 Weights와 Biases\n",
    "    Wh_1 = tf.Variable(tf.random_normal([n_input, n_hidden_1]))   \n",
    "    bh_1 = tf.Variable(tf.random_normal([n_hidden_1]))\n",
    "    h_1 = tf.nn.sigmoid(tf.matmul(X, Wh_1) +bh_1)     # 히든레이어 1의 activation (sigmoid 함수를 사용)\n",
    "    # 히든 레이어 2을 위한 Weights와 Biases\n",
    "    Wh_2 = tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2]))\n",
    "    bh_2 = tf.Variable(tf.random_normal([n_hidden_2]))\n",
    "    h_2 = tf.nn.sigmoid(tf.matmul(h_1, Wh_2) +bh_2)   # 히든레이어 2의 activation (sigmoid 함수를 사용)\n",
    "    # Output 레이어를 위한 Weights와 Biases\n",
    "    Wo = tf.Variable(tf.random_normal([n_hidden_2, n_input]))\n",
    "    bo = tf.Variable(tf.random_normal([n_input]))\n",
    "    X_reconstructed = tf.nn.sigmoid(tf.matmul(h_2,Wo) + bo)   # Output 레이어의 activation (sigmoid 함수를 사용)\n",
    "    return X_reconstructed, h_2 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Softmax Classifier를 생성한다.\n",
    "def build_softmax_classifier():\n",
    "    # Softmax Classifier를 위한 파라미터들\n",
    "    W = tf.Variable(tf.zeros([n_hidden_2, 10]))\n",
    "    b = tf.Variable(tf.zeros([10]))\n",
    "    y_pred = tf.nn.softmax(tf.matmul(extracted_features, W) + b)      # 예측된 Output : 두번째 히든레이어의 activation output을 input으로 사용한다. \n",
    "    return y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 학습에 필요한 변수들 설정\n",
    "X = tf.placeholder(\"float\", [None, n_input])    # Input 데이터 설정\n",
    "y_pred, extracted_features = build_autoencoder() # Autoencoder의 Reconstruction 결과, 압축된 Features(h_2=200)\n",
    "y_true = X # Output 값(True Output)을 설정(=Input 값)\n",
    "y = build_softmax_classifier()                # Predicted Output using Softmax Classifier\n",
    "y_ = tf.placeholder(tf.float32, [None, 10])   # True Output\n",
    "\n",
    "\n",
    "# Optimization을 위한 파라미터들\n",
    "# Autoencoder Optimization을 위한 파라미터들 \n",
    "reconsturction_cost = tf.reduce_mean(tf.pow(y_true - y_pred, 2))     # squared error loss 함수\n",
    "initial_optimizer = tf.train.RMSPropOptimizer(learning_rate_RMSProp).minimize(reconsturction_cost)\n",
    "\n",
    "# Softmax Classifier Optimization을 위한 파라미터들 \n",
    "cross_entropy_cost = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))     # cross-entropy loss 함수\n",
    "softmax_classifier_optimizer = tf.train.GradientDescentOptimizer(learning_rate_Gradient_Descent).minimize(cross_entropy_cost)\n",
    "\n",
    "# Fine Tuning Optimization을 위한 파라미터들\n",
    "finetuning_cost = cross_entropy_cost + reconsturction_cost\n",
    "finetuning_optimizer = tf.train.GradientDescentOptimizer(learning_rate_Gradient_Descent).minimize(finetuning_cost)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 0001 cost= 0.178370237\n",
      "Epoch: 0002 cost= 0.155259877\n",
      "Epoch: 0003 cost= 0.139101297\n",
      "Epoch: 0004 cost= 0.133395687\n",
      "Epoch: 0005 cost= 0.130779669\n",
      "Epoch: 0006 cost= 0.127237558\n",
      "Epoch: 0007 cost= 0.124622382\n",
      "Epoch: 0008 cost= 0.123141743\n",
      "Epoch: 0009 cost= 0.118430778\n",
      "Epoch: 0010 cost= 0.115817226\n",
      "Epoch: 0011 cost= 0.118124165\n",
      "Epoch: 0012 cost= 0.112875357\n",
      "Epoch: 0013 cost= 0.112274095\n",
      "Epoch: 0014 cost= 0.107465781\n",
      "Epoch: 0015 cost= 0.107376918\n",
      "Epoch: 0016 cost= 0.100865230\n",
      "Epoch: 0017 cost= 0.098752998\n",
      "Epoch: 0018 cost= 0.098375045\n",
      "Epoch: 0019 cost= 0.097404040\n",
      "Epoch: 0020 cost= 0.094497561\n",
      "Epoch: 0021 cost= 0.096712679\n",
      "Epoch: 0022 cost= 0.093717925\n",
      "Epoch: 0023 cost= 0.092846923\n",
      "Epoch: 0024 cost= 0.092573956\n",
      "Epoch: 0025 cost= 0.089932740\n",
      "Epoch: 0026 cost= 0.089139819\n",
      "Epoch: 0027 cost= 0.089435123\n",
      "Epoch: 0028 cost= 0.089111403\n",
      "Epoch: 0029 cost= 0.086834967\n",
      "Epoch: 0030 cost= 0.084778011\n",
      "Epoch: 0031 cost= 0.085381836\n",
      "Epoch: 0032 cost= 0.084268145\n",
      "Epoch: 0033 cost= 0.084322475\n",
      "Epoch: 0034 cost= 0.082657233\n",
      "Epoch: 0035 cost= 0.084519424\n",
      "Epoch: 0036 cost= 0.083815068\n",
      "Epoch: 0037 cost= 0.080769166\n",
      "Epoch: 0038 cost= 0.079912953\n",
      "Epoch: 0039 cost= 0.076985337\n",
      "Epoch: 0040 cost= 0.078412510\n",
      "Epoch: 0041 cost= 0.076925084\n",
      "Epoch: 0042 cost= 0.078427821\n",
      "Epoch: 0043 cost= 0.080183871\n",
      "Epoch: 0044 cost= 0.078998953\n",
      "Epoch: 0045 cost= 0.077903733\n",
      "Epoch: 0046 cost= 0.074607387\n",
      "Epoch: 0047 cost= 0.074001878\n",
      "Epoch: 0048 cost= 0.073461689\n",
      "Epoch: 0049 cost= 0.074125953\n",
      "Epoch: 0050 cost= 0.071153618\n",
      "Epoch: 0051 cost= 0.073959202\n",
      "Epoch: 0052 cost= 0.072922833\n",
      "Epoch: 0053 cost= 0.070919409\n",
      "Epoch: 0054 cost= 0.073649414\n",
      "Epoch: 0055 cost= 0.073074445\n",
      "Epoch: 0056 cost= 0.074399948\n",
      "Epoch: 0057 cost= 0.071551956\n",
      "Epoch: 0058 cost= 0.070612945\n",
      "Epoch: 0059 cost= 0.071582548\n",
      "Epoch: 0060 cost= 0.072608620\n",
      "Epoch: 0061 cost= 0.071470708\n",
      "Epoch: 0062 cost= 0.069027945\n",
      "Epoch: 0063 cost= 0.069589593\n",
      "Epoch: 0064 cost= 0.072018757\n",
      "Epoch: 0065 cost= 0.068949483\n",
      "Epoch: 0066 cost= 0.068198778\n",
      "Epoch: 0067 cost= 0.069688901\n",
      "Epoch: 0068 cost= 0.068257183\n",
      "Epoch: 0069 cost= 0.067079164\n",
      "Epoch: 0070 cost= 0.068390176\n",
      "Epoch: 0071 cost= 0.068812214\n",
      "Epoch: 0072 cost= 0.067513756\n",
      "Epoch: 0073 cost= 0.066830516\n",
      "Epoch: 0074 cost= 0.066606216\n",
      "Epoch: 0075 cost= 0.067491904\n",
      "Epoch: 0076 cost= 0.066660859\n",
      "Epoch: 0077 cost= 0.064018600\n",
      "Epoch: 0078 cost= 0.066481777\n",
      "Epoch: 0079 cost= 0.066190995\n",
      "Epoch: 0080 cost= 0.065201841\n",
      "Epoch: 0081 cost= 0.064509422\n",
      "Epoch: 0082 cost= 0.065860271\n",
      "Epoch: 0083 cost= 0.063677438\n",
      "Epoch: 0084 cost= 0.063279688\n",
      "Epoch: 0085 cost= 0.063485637\n",
      "Epoch: 0086 cost= 0.062342878\n",
      "Epoch: 0087 cost= 0.061271872\n",
      "Epoch: 0088 cost= 0.062799335\n",
      "Epoch: 0089 cost= 0.062706597\n",
      "Epoch: 0090 cost= 0.061751608\n",
      "Epoch: 0091 cost= 0.060051333\n",
      "Epoch: 0092 cost= 0.061310656\n",
      "Epoch: 0093 cost= 0.060276441\n",
      "Epoch: 0094 cost= 0.061209284\n",
      "Epoch: 0095 cost= 0.058530807\n",
      "Epoch: 0096 cost= 0.061959002\n",
      "Epoch: 0097 cost= 0.059949599\n",
      "Epoch: 0098 cost= 0.059951149\n",
      "Epoch: 0099 cost= 0.058756322\n",
      "Epoch: 0100 cost= 0.057113566\n",
      "Epoch: 0101 cost= 0.057783049\n",
      "Epoch: 0102 cost= 0.056730300\n",
      "Epoch: 0103 cost= 0.054804042\n",
      "Epoch: 0104 cost= 0.054345034\n",
      "Epoch: 0105 cost= 0.056083150\n",
      "Epoch: 0106 cost= 0.054820795\n",
      "Epoch: 0107 cost= 0.054793417\n",
      "Epoch: 0108 cost= 0.054957427\n",
      "Epoch: 0109 cost= 0.055579752\n",
      "Epoch: 0110 cost= 0.054615561\n",
      "Epoch: 0111 cost= 0.053162891\n",
      "Epoch: 0112 cost= 0.054019373\n",
      "Epoch: 0113 cost= 0.053651847\n",
      "Epoch: 0114 cost= 0.054787409\n",
      "Epoch: 0115 cost= 0.053878143\n",
      "Epoch: 0116 cost= 0.051397413\n",
      "Epoch: 0117 cost= 0.052310329\n",
      "Epoch: 0118 cost= 0.054746792\n",
      "Epoch: 0119 cost= 0.053717643\n",
      "Epoch: 0120 cost= 0.053353522\n",
      "Epoch: 0121 cost= 0.054384775\n",
      "Epoch: 0122 cost= 0.052950934\n",
      "Epoch: 0123 cost= 0.053120408\n",
      "Epoch: 0124 cost= 0.053965293\n",
      "Epoch: 0125 cost= 0.053354964\n",
      "Epoch: 0126 cost= 0.053482629\n",
      "Epoch: 0127 cost= 0.054037701\n",
      "Epoch: 0128 cost= 0.051506441\n",
      "Epoch: 0129 cost= 0.052267287\n",
      "Epoch: 0130 cost= 0.052762948\n",
      "Epoch: 0131 cost= 0.052287959\n",
      "Epoch: 0132 cost= 0.051314723\n",
      "Epoch: 0133 cost= 0.051651809\n",
      "Epoch: 0134 cost= 0.050834730\n",
      "Epoch: 0135 cost= 0.052322481\n",
      "Epoch: 0136 cost= 0.050792340\n",
      "Epoch: 0137 cost= 0.051760290\n",
      "Epoch: 0138 cost= 0.052711293\n",
      "Epoch: 0139 cost= 0.051991180\n",
      "Epoch: 0140 cost= 0.052325197\n",
      "Epoch: 0141 cost= 0.052331749\n",
      "Epoch: 0142 cost= 0.052448351\n",
      "Epoch: 0143 cost= 0.050933946\n",
      "Epoch: 0144 cost= 0.051785108\n",
      "Epoch: 0145 cost= 0.049756769\n",
      "Epoch: 0146 cost= 0.049717691\n",
      "Epoch: 0147 cost= 0.049150717\n",
      "Epoch: 0148 cost= 0.051016789\n",
      "Epoch: 0149 cost= 0.049361043\n",
      "Epoch: 0150 cost= 0.050182618\n",
      "Epoch: 0151 cost= 0.051181152\n",
      "Epoch: 0152 cost= 0.049961071\n",
      "Epoch: 0153 cost= 0.049600251\n",
      "Epoch: 0154 cost= 0.050799478\n",
      "Epoch: 0155 cost= 0.050088909\n",
      "Epoch: 0156 cost= 0.049716715\n",
      "Epoch: 0157 cost= 0.049545843\n",
      "Epoch: 0158 cost= 0.048028234\n",
      "Epoch: 0159 cost= 0.049515534\n",
      "Epoch: 0160 cost= 0.048379313\n",
      "Epoch: 0161 cost= 0.048041359\n",
      "Epoch: 0162 cost= 0.048134793\n",
      "Epoch: 0163 cost= 0.048254382\n",
      "Epoch: 0164 cost= 0.048618995\n",
      "Epoch: 0165 cost= 0.048472900\n",
      "Epoch: 0166 cost= 0.047757845\n",
      "Epoch: 0167 cost= 0.047590099\n",
      "Epoch: 0168 cost= 0.045220062\n",
      "Epoch: 0169 cost= 0.046171114\n",
      "Epoch: 0170 cost= 0.045358405\n",
      "Epoch: 0171 cost= 0.046846934\n",
      "Epoch: 0172 cost= 0.047164086\n",
      "Epoch: 0173 cost= 0.045115776\n",
      "Epoch: 0174 cost= 0.045897961\n",
      "Epoch: 0175 cost= 0.045863837\n",
      "Epoch: 0176 cost= 0.046753407\n",
      "Epoch: 0177 cost= 0.046908628\n",
      "Epoch: 0178 cost= 0.046188608\n",
      "Epoch: 0179 cost= 0.046957482\n",
      "Epoch: 0180 cost= 0.045040160\n",
      "Epoch: 0181 cost= 0.045873813\n",
      "Epoch: 0182 cost= 0.045760065\n",
      "Epoch: 0183 cost= 0.045907866\n",
      "Epoch: 0184 cost= 0.045423333\n",
      "Epoch: 0185 cost= 0.045261919\n",
      "Epoch: 0186 cost= 0.044735894\n",
      "Epoch: 0187 cost= 0.045440614\n",
      "Epoch: 0188 cost= 0.045238078\n",
      "Epoch: 0189 cost= 0.046068706\n",
      "Epoch: 0190 cost= 0.045084741\n",
      "Epoch: 0191 cost= 0.045207098\n",
      "Epoch: 0192 cost= 0.046116419\n",
      "Epoch: 0193 cost= 0.045736928\n",
      "Epoch: 0194 cost= 0.043257527\n",
      "Epoch: 0195 cost= 0.043721940\n",
      "Epoch: 0196 cost= 0.045265831\n",
      "Epoch: 0197 cost= 0.042440578\n",
      "Epoch: 0198 cost= 0.044972789\n",
      "Epoch: 0199 cost= 0.045139577\n",
      "Epoch: 0200 cost= 0.043700967\n",
      "Epoch: 0201 cost= 0.043892555\n",
      "Epoch: 0202 cost= 0.043779995\n",
      "Epoch: 0203 cost= 0.044273492\n",
      "Epoch: 0204 cost= 0.043208960\n",
      "Epoch: 0205 cost= 0.043341957\n",
      "Epoch: 0206 cost= 0.043982383\n",
      "Epoch: 0207 cost= 0.043388706\n",
      "Epoch: 0208 cost= 0.044637699\n",
      "Epoch: 0209 cost= 0.044038985\n",
      "Epoch: 0210 cost= 0.043278679\n",
      "Epoch: 0211 cost= 0.042492025\n",
      "Epoch: 0212 cost= 0.041230541\n",
      "Epoch: 0213 cost= 0.043252375\n",
      "Epoch: 0214 cost= 0.043614689\n",
      "Epoch: 0215 cost= 0.042919457\n",
      "Epoch: 0216 cost= 0.041714173\n",
      "Epoch: 0217 cost= 0.042431805\n",
      "Epoch: 0218 cost= 0.041673720\n",
      "Epoch: 0219 cost= 0.044803195\n",
      "Epoch: 0220 cost= 0.043398287\n",
      "Epoch: 0221 cost= 0.043639172\n",
      "Epoch: 0222 cost= 0.041561868\n",
      "Epoch: 0223 cost= 0.040214788\n",
      "Epoch: 0224 cost= 0.040929355\n",
      "Epoch: 0225 cost= 0.041652087\n",
      "Epoch: 0226 cost= 0.041993383\n",
      "Epoch: 0227 cost= 0.042464178\n",
      "Epoch: 0228 cost= 0.041090127\n",
      "Epoch: 0229 cost= 0.041456543\n",
      "Epoch: 0230 cost= 0.041470304\n",
      "Epoch: 0231 cost= 0.040615201\n",
      "Epoch: 0232 cost= 0.040841434\n",
      "Epoch: 0233 cost= 0.040287592\n",
      "Epoch: 0234 cost= 0.040868361\n",
      "Epoch: 0235 cost= 0.040831674\n",
      "Epoch: 0236 cost= 0.040239763\n",
      "Epoch: 0237 cost= 0.040478148\n",
      "Epoch: 0238 cost= 0.039509509\n",
      "Epoch: 0239 cost= 0.040099937\n",
      "Epoch: 0240 cost= 0.040571712\n",
      "Epoch: 0241 cost= 0.041476037\n",
      "Epoch: 0242 cost= 0.039031740\n",
      "Epoch: 0243 cost= 0.039298251\n",
      "Epoch: 0244 cost= 0.040155351\n",
      "Epoch: 0245 cost= 0.040144034\n",
      "Epoch: 0246 cost= 0.040830106\n",
      "Epoch: 0247 cost= 0.038911890\n",
      "Epoch: 0248 cost= 0.041006722\n",
      "Epoch: 0249 cost= 0.039506912\n",
      "Epoch: 0250 cost= 0.040686432\n",
      "Epoch: 0251 cost= 0.042758193\n",
      "Epoch: 0252 cost= 0.039794233\n",
      "Epoch: 0253 cost= 0.041132908\n",
      "Epoch: 0254 cost= 0.039325614\n",
      "Epoch: 0255 cost= 0.040113851\n",
      "Epoch: 0256 cost= 0.039426155\n",
      "Epoch: 0257 cost= 0.038793247\n",
      "Epoch: 0258 cost= 0.039719436\n",
      "Epoch: 0259 cost= 0.039200485\n",
      "Epoch: 0260 cost= 0.040739447\n",
      "Epoch: 0261 cost= 0.038885150\n",
      "Epoch: 0262 cost= 0.041136187\n",
      "Epoch: 0263 cost= 0.040289596\n",
      "Epoch: 0264 cost= 0.039834049\n",
      "Epoch: 0265 cost= 0.040589441\n",
      "Epoch: 0266 cost= 0.038362093\n",
      "Epoch: 0267 cost= 0.038524061\n",
      "Epoch: 0268 cost= 0.038602021\n",
      "Epoch: 0269 cost= 0.037271600\n",
      "Epoch: 0270 cost= 0.038083013\n",
      "Epoch: 0271 cost= 0.038173392\n",
      "Epoch: 0272 cost= 0.039939836\n",
      "Epoch: 0273 cost= 0.037196618\n",
      "Epoch: 0274 cost= 0.038890678\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 0275 cost= 0.038387764\n",
      "Epoch: 0276 cost= 0.037653923\n",
      "Epoch: 0277 cost= 0.038537893\n",
      "Epoch: 0278 cost= 0.037926309\n",
      "Epoch: 0279 cost= 0.039687358\n",
      "Epoch: 0280 cost= 0.038582575\n",
      "Epoch: 0281 cost= 0.039476428\n",
      "Epoch: 0282 cost= 0.037687212\n",
      "Epoch: 0283 cost= 0.038476817\n",
      "Epoch: 0284 cost= 0.037670467\n",
      "Epoch: 0285 cost= 0.037758101\n",
      "Epoch: 0286 cost= 0.036290284\n",
      "Epoch: 0287 cost= 0.036877669\n",
      "Epoch: 0288 cost= 0.035836428\n",
      "Epoch: 0289 cost= 0.037308600\n",
      "Epoch: 0290 cost= 0.036509011\n",
      "Epoch: 0291 cost= 0.035866231\n",
      "Epoch: 0292 cost= 0.037169375\n",
      "Epoch: 0293 cost= 0.036734559\n",
      "Epoch: 0294 cost= 0.036680859\n",
      "Epoch: 0295 cost= 0.035888702\n",
      "Epoch: 0296 cost= 0.036969703\n",
      "Epoch: 0297 cost= 0.035609100\n",
      "Epoch: 0298 cost= 0.035678174\n",
      "Epoch: 0299 cost= 0.038269166\n",
      "Epoch: 0300 cost= 0.038063131\n",
      "Epoch: 0301 cost= 0.037922524\n",
      "Epoch: 0302 cost= 0.037010279\n",
      "Epoch: 0303 cost= 0.037190482\n",
      "Epoch: 0304 cost= 0.037818268\n",
      "Epoch: 0305 cost= 0.039189667\n",
      "Epoch: 0306 cost= 0.035209086\n",
      "Epoch: 0307 cost= 0.037856281\n",
      "Epoch: 0308 cost= 0.035576586\n",
      "Epoch: 0309 cost= 0.036251064\n",
      "Epoch: 0310 cost= 0.037230477\n",
      "Epoch: 0311 cost= 0.037048101\n",
      "Epoch: 0312 cost= 0.034796853\n",
      "Epoch: 0313 cost= 0.035110079\n",
      "Epoch: 0314 cost= 0.034858339\n",
      "Epoch: 0315 cost= 0.035112798\n",
      "Epoch: 0316 cost= 0.036099374\n",
      "Epoch: 0317 cost= 0.034672100\n",
      "Epoch: 0318 cost= 0.033939745\n",
      "Epoch: 0319 cost= 0.035494581\n",
      "Epoch: 0320 cost= 0.035692789\n",
      "Epoch: 0321 cost= 0.034883749\n",
      "Epoch: 0322 cost= 0.034387343\n",
      "Epoch: 0323 cost= 0.034563035\n",
      "Epoch: 0324 cost= 0.034569506\n",
      "Epoch: 0325 cost= 0.032933094\n",
      "Epoch: 0326 cost= 0.034087799\n",
      "Epoch: 0327 cost= 0.035395999\n",
      "Epoch: 0328 cost= 0.034142841\n",
      "Epoch: 0329 cost= 0.034876358\n",
      "Epoch: 0330 cost= 0.033814460\n",
      "Epoch: 0331 cost= 0.035190746\n",
      "Epoch: 0332 cost= 0.037250422\n",
      "Epoch: 0333 cost= 0.034999460\n",
      "Epoch: 0334 cost= 0.034509111\n",
      "Epoch: 0335 cost= 0.032747533\n",
      "Epoch: 0336 cost= 0.033703249\n",
      "Epoch: 0337 cost= 0.034088343\n",
      "Epoch: 0338 cost= 0.033227842\n",
      "Epoch: 0339 cost= 0.032931246\n",
      "Epoch: 0340 cost= 0.033532314\n",
      "Epoch: 0341 cost= 0.033572398\n",
      "Epoch: 0342 cost= 0.034947306\n",
      "Epoch: 0343 cost= 0.035058640\n",
      "Epoch: 0344 cost= 0.032942846\n",
      "Epoch: 0345 cost= 0.033307463\n",
      "Epoch: 0346 cost= 0.032242846\n",
      "Epoch: 0347 cost= 0.033852763\n",
      "Epoch: 0348 cost= 0.033689134\n",
      "Epoch: 0349 cost= 0.033667296\n",
      "Epoch: 0350 cost= 0.033503141\n",
      "Epoch: 0351 cost= 0.033397179\n",
      "Epoch: 0352 cost= 0.034437750\n",
      "Epoch: 0353 cost= 0.032209124\n",
      "Epoch: 0354 cost= 0.033093553\n",
      "Epoch: 0355 cost= 0.033253420\n",
      "Epoch: 0356 cost= 0.035092756\n",
      "Epoch: 0357 cost= 0.032489069\n",
      "Epoch: 0358 cost= 0.033240579\n",
      "Epoch: 0359 cost= 0.034107968\n",
      "Epoch: 0360 cost= 0.032402948\n",
      "Epoch: 0361 cost= 0.033278324\n",
      "Epoch: 0362 cost= 0.034708299\n",
      "Epoch: 0363 cost= 0.031946585\n",
      "Epoch: 0364 cost= 0.031612828\n",
      "Epoch: 0365 cost= 0.032542691\n",
      "Epoch: 0366 cost= 0.032979049\n",
      "Epoch: 0367 cost= 0.033394936\n",
      "Epoch: 0368 cost= 0.032635368\n",
      "Epoch: 0369 cost= 0.033304978\n",
      "Epoch: 0370 cost= 0.032546531\n",
      "Epoch: 0371 cost= 0.032731149\n",
      "Epoch: 0372 cost= 0.033130340\n",
      "Epoch: 0373 cost= 0.032986559\n",
      "Epoch: 0374 cost= 0.032251697\n",
      "Epoch: 0375 cost= 0.032596342\n",
      "Epoch: 0376 cost= 0.034842841\n",
      "Epoch: 0377 cost= 0.032026190\n",
      "Epoch: 0378 cost= 0.032349367\n",
      "Epoch: 0379 cost= 0.032300327\n",
      "Epoch: 0380 cost= 0.031967890\n",
      "Epoch: 0381 cost= 0.029583819\n",
      "Epoch: 0382 cost= 0.031051245\n",
      "Epoch: 0383 cost= 0.030040909\n",
      "Epoch: 0384 cost= 0.031307351\n",
      "Epoch: 0385 cost= 0.030540369\n",
      "Epoch: 0386 cost= 0.030737847\n",
      "Epoch: 0387 cost= 0.030800110\n",
      "Epoch: 0388 cost= 0.031375326\n",
      "Epoch: 0389 cost= 0.030746331\n",
      "Epoch: 0390 cost= 0.030536307\n",
      "Epoch: 0391 cost= 0.031134587\n",
      "Epoch: 0392 cost= 0.031732250\n",
      "Epoch: 0393 cost= 0.030689249\n",
      "Epoch: 0394 cost= 0.030710926\n",
      "Epoch: 0395 cost= 0.030156646\n",
      "Epoch: 0396 cost= 0.029833220\n",
      "Epoch: 0397 cost= 0.030259177\n",
      "Epoch: 0398 cost= 0.030788368\n",
      "Epoch: 0399 cost= 0.030800948\n",
      "Epoch: 0400 cost= 0.031488560\n",
      "Stacked Autoencoder pre-training Optimization Finished!\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:27: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Softmax Classifier Optimization Finished!\n",
      "Accuracy(before fine-tuning): \n",
      "0.928\n",
      "Epoch: 0001 cost= 0.232779130\n",
      "Epoch: 0002 cost= 0.328999758\n",
      "Epoch: 0003 cost= 0.259723037\n",
      "Epoch: 0004 cost= 0.253022075\n",
      "Epoch: 0005 cost= 0.145642594\n",
      "Epoch: 0006 cost= 0.268194914\n",
      "Epoch: 0007 cost= 0.157797158\n",
      "Epoch: 0008 cost= 0.123636425\n",
      "Epoch: 0009 cost= 0.170311332\n",
      "Epoch: 0010 cost= 0.192940563\n",
      "Epoch: 0011 cost= 0.229959220\n",
      "Epoch: 0012 cost= 0.196347728\n",
      "Epoch: 0013 cost= 0.176866412\n",
      "Epoch: 0014 cost= 0.201385468\n",
      "Epoch: 0015 cost= 0.236713111\n",
      "Epoch: 0016 cost= 0.201827750\n",
      "Epoch: 0017 cost= 0.101918034\n",
      "Epoch: 0018 cost= 0.149716437\n",
      "Epoch: 0019 cost= 0.160499796\n",
      "Epoch: 0020 cost= 0.103736304\n",
      "Epoch: 0021 cost= 0.113786295\n",
      "Epoch: 0022 cost= 0.115704060\n",
      "Epoch: 0023 cost= 0.168421239\n",
      "Epoch: 0024 cost= 0.097544566\n",
      "Epoch: 0025 cost= 0.100792922\n",
      "Epoch: 0026 cost= 0.104686856\n",
      "Epoch: 0027 cost= 0.109613560\n",
      "Epoch: 0028 cost= 0.120981932\n",
      "Epoch: 0029 cost= 0.140732110\n",
      "Epoch: 0030 cost= 0.149416000\n",
      "Epoch: 0031 cost= 0.137470081\n",
      "Epoch: 0032 cost= 0.104211748\n",
      "Epoch: 0033 cost= 0.118942834\n",
      "Epoch: 0034 cost= 0.116532557\n",
      "Epoch: 0035 cost= 0.123451546\n",
      "Epoch: 0036 cost= 0.101075046\n",
      "Epoch: 0037 cost= 0.078399725\n",
      "Epoch: 0038 cost= 0.115113705\n",
      "Epoch: 0039 cost= 0.074494392\n",
      "Epoch: 0040 cost= 0.076543868\n",
      "Epoch: 0041 cost= 0.116948195\n",
      "Epoch: 0042 cost= 0.106132790\n",
      "Epoch: 0043 cost= 0.074329130\n",
      "Epoch: 0044 cost= 0.104719430\n",
      "Epoch: 0045 cost= 0.098066293\n",
      "Epoch: 0046 cost= 0.125194967\n",
      "Epoch: 0047 cost= 0.082020476\n",
      "Epoch: 0048 cost= 0.072591513\n",
      "Epoch: 0049 cost= 0.084635273\n",
      "Epoch: 0050 cost= 0.066223159\n",
      "Epoch: 0051 cost= 0.059471123\n",
      "Epoch: 0052 cost= 0.082404748\n",
      "Epoch: 0053 cost= 0.098802194\n",
      "Epoch: 0054 cost= 0.067231879\n",
      "Epoch: 0055 cost= 0.081104547\n",
      "Epoch: 0056 cost= 0.073230207\n",
      "Epoch: 0057 cost= 0.086966962\n",
      "Epoch: 0058 cost= 0.069851317\n",
      "Epoch: 0059 cost= 0.068833098\n",
      "Epoch: 0060 cost= 0.066381171\n",
      "Epoch: 0061 cost= 0.107862562\n",
      "Epoch: 0062 cost= 0.061943904\n",
      "Epoch: 0063 cost= 0.064429827\n",
      "Epoch: 0064 cost= 0.072152510\n",
      "Epoch: 0065 cost= 0.071564518\n",
      "Epoch: 0066 cost= 0.080942392\n",
      "Epoch: 0067 cost= 0.067488581\n",
      "Epoch: 0068 cost= 0.088889442\n",
      "Epoch: 0069 cost= 0.063565344\n",
      "Epoch: 0070 cost= 0.086302742\n",
      "Epoch: 0071 cost= 0.049934398\n",
      "Epoch: 0072 cost= 0.053191759\n",
      "Epoch: 0073 cost= 0.058133416\n",
      "Epoch: 0074 cost= 0.065338515\n",
      "Epoch: 0075 cost= 0.078107968\n",
      "Epoch: 0076 cost= 0.067443207\n",
      "Epoch: 0077 cost= 0.086966060\n",
      "Epoch: 0078 cost= 0.082105651\n",
      "Epoch: 0079 cost= 0.071477637\n",
      "Epoch: 0080 cost= 0.064072542\n",
      "Epoch: 0081 cost= 0.075447574\n",
      "Epoch: 0082 cost= 0.051632166\n",
      "Epoch: 0083 cost= 0.056718007\n",
      "Epoch: 0084 cost= 0.051061913\n",
      "Epoch: 0085 cost= 0.061694674\n",
      "Epoch: 0086 cost= 0.056942254\n",
      "Epoch: 0087 cost= 0.055963315\n",
      "Epoch: 0088 cost= 0.068186820\n",
      "Epoch: 0089 cost= 0.068016857\n",
      "Epoch: 0090 cost= 0.050317623\n",
      "Epoch: 0091 cost= 0.068278164\n",
      "Epoch: 0092 cost= 0.056937501\n",
      "Epoch: 0093 cost= 0.052143868\n",
      "Epoch: 0094 cost= 0.052061331\n",
      "Epoch: 0095 cost= 0.067647144\n",
      "Epoch: 0096 cost= 0.060558230\n",
      "Epoch: 0097 cost= 0.049588889\n",
      "Epoch: 0098 cost= 0.055114180\n",
      "Epoch: 0099 cost= 0.049908616\n",
      "Epoch: 0100 cost= 0.058646724\n",
      "Epoch: 0101 cost= 0.050732255\n",
      "Epoch: 0102 cost= 0.054950584\n",
      "Epoch: 0103 cost= 0.051887449\n",
      "Epoch: 0104 cost= 0.061726484\n",
      "Epoch: 0105 cost= 0.052062236\n",
      "Epoch: 0106 cost= 0.048365965\n",
      "Epoch: 0107 cost= 0.047794126\n",
      "Epoch: 0108 cost= 0.055218093\n",
      "Epoch: 0109 cost= 0.055605963\n",
      "Epoch: 0110 cost= 0.047956187\n",
      "Epoch: 0111 cost= 0.049537033\n",
      "Epoch: 0112 cost= 0.049990602\n",
      "Epoch: 0113 cost= 0.056474358\n",
      "Epoch: 0114 cost= 0.049172074\n",
      "Epoch: 0115 cost= 0.049912736\n",
      "Epoch: 0116 cost= 0.051259689\n",
      "Epoch: 0117 cost= 0.052517474\n",
      "Epoch: 0118 cost= 0.048376422\n",
      "Epoch: 0119 cost= 0.051131930\n",
      "Epoch: 0120 cost= 0.047056071\n",
      "Epoch: 0121 cost= 0.043451119\n",
      "Epoch: 0122 cost= 0.049396951\n",
      "Epoch: 0123 cost= 0.060700580\n",
      "Epoch: 0124 cost= 0.052078001\n",
      "Epoch: 0125 cost= 0.050478913\n",
      "Epoch: 0126 cost= 0.048088171\n",
      "Epoch: 0127 cost= 0.051366273\n",
      "Epoch: 0128 cost= 0.045753725\n",
      "Epoch: 0129 cost= 0.052619517\n",
      "Epoch: 0130 cost= 0.046549629\n",
      "Epoch: 0131 cost= 0.043397829\n",
      "Epoch: 0132 cost= 0.045534309\n",
      "Epoch: 0133 cost= 0.052289635\n",
      "Epoch: 0134 cost= 0.044023141\n",
      "Epoch: 0135 cost= 0.050247218\n",
      "Epoch: 0136 cost= 0.061045393\n",
      "Epoch: 0137 cost= 0.044950347\n",
      "Epoch: 0138 cost= 0.042344444\n",
      "Epoch: 0139 cost= 0.050062485\n",
      "Epoch: 0140 cost= 0.048667889\n",
      "Epoch: 0141 cost= 0.049682938\n",
      "Epoch: 0142 cost= 0.045099385\n",
      "Epoch: 0143 cost= 0.046993442\n",
      "Epoch: 0144 cost= 0.047098428\n",
      "Epoch: 0145 cost= 0.051901553\n",
      "Epoch: 0146 cost= 0.048633568\n",
      "Epoch: 0147 cost= 0.047898799\n",
      "Epoch: 0148 cost= 0.041779790\n",
      "Epoch: 0149 cost= 0.048297226\n",
      "Epoch: 0150 cost= 0.046390072\n",
      "Epoch: 0151 cost= 0.040313669\n",
      "Epoch: 0152 cost= 0.044904441\n",
      "Epoch: 0153 cost= 0.049050264\n",
      "Epoch: 0154 cost= 0.047695234\n",
      "Epoch: 0155 cost= 0.045183785\n",
      "Epoch: 0156 cost= 0.042021576\n",
      "Epoch: 0157 cost= 0.043721251\n",
      "Epoch: 0158 cost= 0.047234975\n",
      "Epoch: 0159 cost= 0.043558009\n",
      "Epoch: 0160 cost= 0.043824606\n",
      "Epoch: 0161 cost= 0.042964410\n",
      "Epoch: 0162 cost= 0.043290913\n",
      "Epoch: 0163 cost= 0.042345375\n",
      "Epoch: 0164 cost= 0.043796167\n",
      "Epoch: 0165 cost= 0.043654695\n",
      "Epoch: 0166 cost= 0.041091576\n",
      "Epoch: 0167 cost= 0.042954080\n",
      "Epoch: 0168 cost= 0.041181017\n",
      "Epoch: 0169 cost= 0.041280568\n",
      "Epoch: 0170 cost= 0.039366897\n",
      "Epoch: 0171 cost= 0.045140773\n",
      "Epoch: 0172 cost= 0.040812243\n",
      "Epoch: 0173 cost= 0.043380685\n",
      "Epoch: 0174 cost= 0.040194444\n",
      "Epoch: 0175 cost= 0.075249493\n",
      "Epoch: 0176 cost= 0.042567447\n",
      "Epoch: 0177 cost= 0.048119329\n",
      "Epoch: 0178 cost= 0.041956600\n",
      "Epoch: 0179 cost= 0.041678756\n",
      "Epoch: 0180 cost= 0.040950336\n",
      "Epoch: 0181 cost= 0.040626131\n",
      "Epoch: 0182 cost= 0.040828161\n",
      "Epoch: 0183 cost= 0.067746297\n",
      "Epoch: 0184 cost= 0.043485664\n",
      "Epoch: 0185 cost= 0.044725358\n",
      "Epoch: 0186 cost= 0.043217130\n",
      "Epoch: 0187 cost= 0.043570817\n",
      "Epoch: 0188 cost= 0.040499203\n",
      "Epoch: 0189 cost= 0.042742819\n",
      "Epoch: 0190 cost= 0.042736158\n",
      "Epoch: 0191 cost= 0.041707471\n",
      "Epoch: 0192 cost= 0.041571978\n",
      "Epoch: 0193 cost= 0.040234338\n",
      "Epoch: 0194 cost= 0.041076634\n",
      "Epoch: 0195 cost= 0.041096546\n",
      "Epoch: 0196 cost= 0.041494291\n",
      "Epoch: 0197 cost= 0.045629032\n",
      "Epoch: 0198 cost= 0.040141404\n",
      "Epoch: 0199 cost= 0.041185413\n",
      "Epoch: 0200 cost= 0.043726020\n",
      "Epoch: 0201 cost= 0.041963737\n",
      "Epoch: 0202 cost= 0.039687000\n",
      "Epoch: 0203 cost= 0.039360721\n",
      "Epoch: 0204 cost= 0.039140262\n",
      "Epoch: 0205 cost= 0.039888822\n",
      "Epoch: 0206 cost= 0.037285060\n",
      "Epoch: 0207 cost= 0.039613616\n",
      "Epoch: 0208 cost= 0.041540727\n",
      "Epoch: 0209 cost= 0.039151162\n",
      "Epoch: 0210 cost= 0.040635068\n",
      "Epoch: 0211 cost= 0.040087238\n",
      "Epoch: 0212 cost= 0.038605958\n",
      "Epoch: 0213 cost= 0.041597828\n",
      "Epoch: 0214 cost= 0.039454766\n",
      "Epoch: 0215 cost= 0.038096618\n",
      "Epoch: 0216 cost= 0.041632198\n",
      "Epoch: 0217 cost= 0.040520154\n",
      "Epoch: 0218 cost= 0.042270668\n",
      "Epoch: 0219 cost= 0.040631577\n",
      "Epoch: 0220 cost= 0.045588125\n",
      "Epoch: 0221 cost= 0.040839482\n",
      "Epoch: 0222 cost= 0.038497947\n",
      "Epoch: 0223 cost= 0.041569594\n",
      "Epoch: 0224 cost= 0.040092628\n",
      "Epoch: 0225 cost= 0.043283097\n",
      "Epoch: 0226 cost= 0.039629005\n",
      "Epoch: 0227 cost= 0.038302429\n",
      "Epoch: 0228 cost= 0.039637294\n",
      "Epoch: 0229 cost= 0.038490269\n",
      "Epoch: 0230 cost= 0.037989706\n",
      "Epoch: 0231 cost= 0.037481580\n",
      "Epoch: 0232 cost= 0.040693492\n",
      "Epoch: 0233 cost= 0.038666829\n",
      "Epoch: 0234 cost= 0.040551897\n",
      "Epoch: 0235 cost= 0.041168213\n",
      "Epoch: 0236 cost= 0.040418487\n",
      "Epoch: 0237 cost= 0.039448097\n",
      "Epoch: 0238 cost= 0.049935311\n",
      "Epoch: 0239 cost= 0.037228614\n",
      "Epoch: 0240 cost= 0.038684078\n",
      "Epoch: 0241 cost= 0.039113272\n",
      "Epoch: 0242 cost= 0.040427059\n",
      "Epoch: 0243 cost= 0.038511176\n",
      "Epoch: 0244 cost= 0.040704355\n",
      "Epoch: 0245 cost= 0.043997157\n",
      "Epoch: 0246 cost= 0.038939375\n",
      "Epoch: 0247 cost= 0.038801074\n",
      "Epoch: 0248 cost= 0.037940528\n",
      "Epoch: 0249 cost= 0.039845023\n",
      "Epoch: 0250 cost= 0.038812038\n",
      "Epoch: 0251 cost= 0.037003096\n",
      "Epoch: 0252 cost= 0.039299197\n",
      "Epoch: 0253 cost= 0.038506288\n",
      "Epoch: 0254 cost= 0.037419394\n",
      "Epoch: 0255 cost= 0.038927808\n",
      "Epoch: 0256 cost= 0.038405664\n",
      "Epoch: 0257 cost= 0.041371878\n",
      "Epoch: 0258 cost= 0.036919545\n",
      "Epoch: 0259 cost= 0.040277153\n",
      "Epoch: 0260 cost= 0.038624790\n",
      "Epoch: 0261 cost= 0.036008585\n",
      "Epoch: 0262 cost= 0.039222855\n",
      "Epoch: 0263 cost= 0.038231976\n",
      "Epoch: 0264 cost= 0.041799299\n",
      "Epoch: 0265 cost= 0.036993533\n",
      "Epoch: 0266 cost= 0.036656536\n",
      "Epoch: 0267 cost= 0.037623279\n",
      "Epoch: 0268 cost= 0.040575955\n",
      "Epoch: 0269 cost= 0.036902238\n",
      "Epoch: 0270 cost= 0.039307550\n",
      "Epoch: 0271 cost= 0.038481098\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 0272 cost= 0.038998622\n",
      "Epoch: 0273 cost= 0.038407627\n",
      "Epoch: 0274 cost= 0.038565390\n",
      "Epoch: 0275 cost= 0.038116556\n",
      "Epoch: 0276 cost= 0.037473541\n",
      "Epoch: 0277 cost= 0.040602863\n",
      "Epoch: 0278 cost= 0.037905622\n",
      "Epoch: 0279 cost= 0.037481468\n",
      "Epoch: 0280 cost= 0.035669059\n",
      "Epoch: 0281 cost= 0.038025625\n",
      "Epoch: 0282 cost= 0.039030720\n",
      "Epoch: 0283 cost= 0.037948612\n",
      "Epoch: 0284 cost= 0.037878975\n",
      "Epoch: 0285 cost= 0.037232161\n",
      "Epoch: 0286 cost= 0.037089959\n",
      "Epoch: 0287 cost= 0.038688730\n",
      "Epoch: 0288 cost= 0.037577447\n",
      "Epoch: 0289 cost= 0.037040107\n",
      "Epoch: 0290 cost= 0.040938847\n",
      "Epoch: 0291 cost= 0.038383812\n",
      "Epoch: 0292 cost= 0.037930746\n",
      "Epoch: 0293 cost= 0.036044490\n",
      "Epoch: 0294 cost= 0.036469728\n",
      "Epoch: 0295 cost= 0.038990930\n",
      "Epoch: 0296 cost= 0.036645904\n",
      "Epoch: 0297 cost= 0.038305826\n",
      "Epoch: 0298 cost= 0.041003454\n",
      "Epoch: 0299 cost= 0.037119780\n",
      "Epoch: 0300 cost= 0.037097812\n",
      "Epoch: 0301 cost= 0.039207216\n",
      "Epoch: 0302 cost= 0.037042238\n",
      "Epoch: 0303 cost= 0.037273120\n",
      "Epoch: 0304 cost= 0.038352016\n",
      "Epoch: 0305 cost= 0.036383457\n",
      "Epoch: 0306 cost= 0.037792120\n",
      "Epoch: 0307 cost= 0.037248477\n",
      "Epoch: 0308 cost= 0.037459806\n",
      "Epoch: 0309 cost= 0.038137015\n",
      "Epoch: 0310 cost= 0.036621056\n",
      "Epoch: 0311 cost= 0.038874201\n",
      "Epoch: 0312 cost= 0.038802106\n",
      "Epoch: 0313 cost= 0.036455538\n",
      "Epoch: 0314 cost= 0.038235381\n",
      "Epoch: 0315 cost= 0.038413413\n",
      "Epoch: 0316 cost= 0.035920706\n",
      "Epoch: 0317 cost= 0.037305880\n",
      "Epoch: 0318 cost= 0.036987800\n",
      "Epoch: 0319 cost= 0.036738072\n",
      "Epoch: 0320 cost= 0.036600441\n",
      "Epoch: 0321 cost= 0.036753323\n",
      "Epoch: 0322 cost= 0.037224751\n",
      "Epoch: 0323 cost= 0.036373775\n",
      "Epoch: 0324 cost= 0.037366532\n",
      "Epoch: 0325 cost= 0.037532687\n",
      "Epoch: 0326 cost= 0.036577839\n",
      "Epoch: 0327 cost= 0.037592087\n",
      "Epoch: 0328 cost= 0.038958117\n",
      "Epoch: 0329 cost= 0.035964224\n",
      "Epoch: 0330 cost= 0.036627591\n",
      "Epoch: 0331 cost= 0.036475040\n",
      "Epoch: 0332 cost= 0.036225349\n",
      "Epoch: 0333 cost= 0.036086597\n",
      "Epoch: 0334 cost= 0.035904910\n",
      "Epoch: 0335 cost= 0.037754364\n",
      "Epoch: 0336 cost= 0.036413979\n",
      "Epoch: 0337 cost= 0.038466517\n",
      "Epoch: 0338 cost= 0.037220031\n",
      "Epoch: 0339 cost= 0.035409208\n",
      "Epoch: 0340 cost= 0.036545243\n",
      "Epoch: 0341 cost= 0.038129307\n",
      "Epoch: 0342 cost= 0.036634337\n",
      "Epoch: 0343 cost= 0.035855841\n",
      "Epoch: 0344 cost= 0.036060520\n",
      "Epoch: 0345 cost= 0.036362808\n",
      "Epoch: 0346 cost= 0.036887493\n",
      "Epoch: 0347 cost= 0.037871834\n",
      "Epoch: 0348 cost= 0.036925655\n",
      "Epoch: 0349 cost= 0.037020918\n",
      "Epoch: 0350 cost= 0.035621345\n",
      "Epoch: 0351 cost= 0.035963897\n",
      "Epoch: 0352 cost= 0.035681866\n",
      "Epoch: 0353 cost= 0.035075948\n",
      "Epoch: 0354 cost= 0.036855761\n",
      "Epoch: 0355 cost= 0.035086937\n",
      "Epoch: 0356 cost= 0.036627080\n",
      "Epoch: 0357 cost= 0.036607664\n",
      "Epoch: 0358 cost= 0.037459534\n",
      "Epoch: 0359 cost= 0.036447514\n",
      "Epoch: 0360 cost= 0.035467718\n",
      "Epoch: 0361 cost= 0.035368431\n",
      "Epoch: 0362 cost= 0.036211777\n",
      "Epoch: 0363 cost= 0.035841517\n",
      "Epoch: 0364 cost= 0.036444448\n",
      "Epoch: 0365 cost= 0.035971381\n",
      "Epoch: 0366 cost= 0.036110643\n",
      "Epoch: 0367 cost= 0.035959654\n",
      "Epoch: 0368 cost= 0.034724139\n",
      "Epoch: 0369 cost= 0.036182828\n",
      "Epoch: 0370 cost= 0.036995731\n",
      "Epoch: 0371 cost= 0.037260029\n",
      "Epoch: 0372 cost= 0.035369419\n",
      "Epoch: 0373 cost= 0.035250466\n",
      "Epoch: 0374 cost= 0.036393184\n",
      "Epoch: 0375 cost= 0.035857111\n",
      "Epoch: 0376 cost= 0.035539366\n",
      "Epoch: 0377 cost= 0.037254721\n",
      "Epoch: 0378 cost= 0.036109567\n",
      "Epoch: 0379 cost= 0.037093863\n",
      "Epoch: 0380 cost= 0.036097173\n",
      "Epoch: 0381 cost= 0.035444986\n",
      "Epoch: 0382 cost= 0.036483824\n",
      "Epoch: 0383 cost= 0.035307355\n",
      "Epoch: 0384 cost= 0.035531394\n",
      "Epoch: 0385 cost= 0.035829201\n",
      "Epoch: 0386 cost= 0.035132207\n",
      "Epoch: 0387 cost= 0.035489857\n",
      "Epoch: 0388 cost= 0.035764761\n",
      "Epoch: 0389 cost= 0.036707494\n",
      "Epoch: 0390 cost= 0.036539514\n",
      "Epoch: 0391 cost= 0.035322189\n",
      "Epoch: 0392 cost= 0.037175342\n",
      "Epoch: 0393 cost= 0.034382850\n",
      "Epoch: 0394 cost= 0.033623558\n",
      "Epoch: 0395 cost= 0.035411399\n",
      "Epoch: 0396 cost= 0.034531593\n",
      "Epoch: 0397 cost= 0.035670981\n",
      "Epoch: 0398 cost= 0.035174206\n",
      "Epoch: 0399 cost= 0.037326358\n",
      "Epoch: 0400 cost= 0.036457915\n",
      "Fine-tuning softmax model Optimization Finished!\n",
      "Accuracy(after fine-tuning): \n",
      "0.967\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x144 with 20 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "with tf.Session() as sess:\n",
    "    # 변수들을 초기화한다.\n",
    "    sess.run(tf.global_variables_initializer())\n",
    "    \n",
    "    # Step 1: Stacked Autoencoder pre-training \n",
    "    total_batch = int(mnist.train.num_examples/batch_size)\n",
    "    # Training을 시작한다.\n",
    "    for epoch in range(training_epochs):\n",
    "        # 모든 배치들을 돌아가면서(Loop) 학습한다.\n",
    "        for i in range(total_batch):\n",
    "            batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n",
    "            # batch 데이터를 이용해서 트레이닝을 진행한다.\n",
    "            _, cost_value = sess.run([initial_optimizer, reconsturction_cost], feed_dict={X: batch_xs})\n",
    "        # 일정 epoch step마다 로그를 출력한다.\n",
    "        if epoch % display_step == 0:\n",
    "            print(\"Epoch:\", '%04d' % (epoch+1), \"cost=\", \"{:.9f}\".format(cost_value))\n",
    "    print(\"Stacked Autoencoder pre-training Optimization Finished!\")\n",
    "\n",
    "\n",
    "    # Step 2: test 데이터셋을 autoencoder로 reconstruction 해본다.\n",
    "    reconstructed_image = sess.run(y_pred, feed_dict={X: mnist.test.images[:examples_to_show]})\n",
    "    # 원본 이미지와 재구축(reconstructed)된 이미지를 비교한다.\n",
    "    f, a = plt.subplots(2, 10, figsize=(10, 2))\n",
    "    for i in range(examples_to_show):\n",
    "        a[0][i].imshow(np.reshape(mnist.test.images[i], (28, 28)))\n",
    "        a[1][i].imshow(np.reshape(reconstructed_image[i], (28, 28)))\n",
    "    f.show()\n",
    "    plt.draw()\n",
    "    #plt.waitforbuttonpress()     # 버튼을 누를때까지 작업 정지 \n",
    "    f.savefig('reconstructed_mnist_image.png')  # reconstruction 결과를 png로 저장한다.\n",
    "\n",
    "\n",
    "    # Step 3: Softmax Classifier를 학습한다.\n",
    "    for i in range(softmax_classifier_iterations):\n",
    "      batch_xs, batch_ys = mnist.train.next_batch(100)     \n",
    "      sess.run(softmax_classifier_optimizer, feed_dict={X: batch_xs, y_: batch_ys})  \n",
    "    print(\"Softmax Classifier Optimization Finished!\")\n",
    "\n",
    "\n",
    "    # Step 4: 학습된 모델이 얼마나 정확한지를 출력한다. (Before fine-tuning) \n",
    "    correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\n",
    "    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n",
    "    print(\"Accuracy(before fine-tuning): \")   # Accuracy ~ 0.9282\n",
    "    print(sess.run(accuracy, feed_dict={X: mnist.test.images, y_: mnist.test.labels}))\n",
    "\n",
    "\n",
    "    # Step 5: Fine-tuning softmax model\n",
    "    # Training을 시작한다.\n",
    "    for epoch in range(training_epochs):\n",
    "       # 모든 배치들을 돌아가면서(Loop) 학습한다.\n",
    "        for i in range(total_batch):\n",
    "            batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n",
    "            # batch 데이터를 이용해서 트레이닝을 진행한다.\n",
    "            _, cost_value = sess.run([finetuning_optimizer, finetuning_cost], feed_dict={X: batch_xs,  y_: batch_ys})\n",
    "        # 일정 epoch step마다 로그를 출력한다.\n",
    "        if epoch % display_step == 0:\n",
    "            print(\"Epoch:\", '%04d' % (epoch+1), \"cost=\", \"{:.9f}\".format(cost_value))\n",
    "    print(\"Fine-tuning softmax model Optimization Finished!\")\n",
    "\n",
    "\n",
    "    # Step 6: 학습된 모델이 얼마나 정확한지를 출력한다. (After fine-tuning) \n",
    "    print(\"Accuracy(after fine-tuning): \")      # Accuracy ~ 0.9714\n",
    "    print(sess.run(accuracy, feed_dict={X: mnist.test.images, y_: mnist.test.labels}))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# denoising_autoencoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\ProgramData\\Anaconda3\\lib\\site-packages\\tensorflow\\contrib\\learn\\python\\learn\\datasets\\base.py:252: _internal_retry.<locals>.wrap.<locals>.wrapped_fn (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use urllib or similar directly.\n",
      "Successfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.\n",
      "Extracting ./mnist/train-images-idx3-ubyte.gz\n",
      "Successfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.\n",
      "Extracting ./mnist/train-labels-idx1-ubyte.gz\n",
      "Successfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.\n",
      "Extracting ./mnist/t10k-images-idx3-ubyte.gz\n",
      "Successfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.\n",
      "Extracting ./mnist/t10k-labels-idx1-ubyte.gz\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.examples.tutorials.mnist import input_data\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "data = input_data.read_data_sets(\"./mnist/\", one_hot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training X:  (55000, 784)\n",
      "Training Y:  (55000, 10)\n",
      "Test X:  (10000, 784)\n",
      "Test Y:  (10000, 10)\n"
     ]
    }
   ],
   "source": [
    "# Print shapes of data\n",
    "print(\"Training X: \", data.train.images.shape)\n",
    "print(\"Training Y: \", data.train.labels.shape)\n",
    "print(\"Test X: \", data.test.images.shape)\n",
    "print(\"Test Y: \", data.test.labels.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gaussian_additive_noise(x, std):\n",
    "    \n",
    "    return x + tf.random_normal(shape=tf.shape(x), dtype=tf.float32, mean=0.0, stddev=std)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "imgs = tf.placeholder(tf.float32, shape=[None, 28*28], name=\"Input\")\n",
    "\n",
    "noise = gaussian_additive_noise(imgs, 0.1)\n",
    "corrupted_imgs_test = noise.eval(session=tf.Session(), feed_dict={imgs: data.test.images})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_mnist(imgs, lbls):\n",
    "    \n",
    "    classes = np.argmax(lbls, 1)\n",
    "\n",
    "    for i in range(10):\n",
    "        ids = (classes == i)\n",
    "        \n",
    "        images = imgs[ids][0:10]\n",
    "            \n",
    "        for j in range(3):   \n",
    "            plt.subplot(5, 10, i + j*10 + 1)\n",
    "            plt.imshow(images[j].reshape(28, 28), cmap='gray')\n",
    "\n",
    "            if j == 0:\n",
    "                plt.title(i)\n",
    "                \n",
    "            plt.axis('off')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "def autoencoder(dims=[28*28, 512, 256, 128, 64, 32], std=0.01):\n",
    "    \n",
    "    x = tf.placeholder(tf.float32, shape=[None, dims[0]], name=\"Input\")\n",
    "\n",
    "    cur = gaussian_additive_noise(x, 0.1)\n",
    "    \n",
    "    Ws = []\n",
    "    bs = []\n",
    "    \n",
    "    # encoder\n",
    "    for i, n_out in enumerate(dims[1:]):\n",
    "        n_inp = int(cur.get_shape()[1])\n",
    "        \n",
    "        W = tf.Variable(tf.random_normal(shape=[n_inp, n_out], mean=0.0, stddev=std, dtype=tf.float32))\n",
    "        b = tf.Variable(tf.random_normal(shape=[n_out], mean=0.0, stddev=std, dtype=tf.float32))\n",
    "        \n",
    "        Ws.append(W)\n",
    "        bs.append(b)\n",
    "        \n",
    "        out = tf.nn.tanh(cur @ W + b)\n",
    "        cur = out\n",
    "        \n",
    "    z = cur\n",
    "    Ws.reverse()\n",
    "    bs.reverse()\n",
    "    \n",
    "    # decoder\n",
    "    for i, n_out in enumerate(dims[:-1][::-1]):\n",
    "        \n",
    "        W = tf.transpose(Ws[i])\n",
    "        b = tf.Variable(tf.random_normal(shape=[n_out], mean=0.0, stddev=std, dtype=tf.float32))\n",
    "        \n",
    "        \n",
    "        out = tf.nn.tanh(cur @ W + b)\n",
    "        cur = out\n",
    "    \n",
    "    y = cur\n",
    "    \n",
    "    loss = tf.reduce_mean(tf.square(y - x))\n",
    "    \n",
    "    return (x, z, y, loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 0.0006286425050348043\n",
      "2 0.00046614056918770075\n",
      "3 0.0003553589340299368\n",
      "4 0.0003094529965892434\n",
      "5 0.0003046603233087808\n",
      "6 0.0002668630622792989\n",
      "7 0.00024258086341433227\n",
      "8 0.00022946757962927222\n",
      "9 0.0002081320999423042\n",
      "10 0.00019656543736346066\n",
      "11 0.00018987849762197584\n",
      "12 0.00017543217109050602\n",
      "13 0.00018586647638585418\n",
      "14 0.00017283039051108062\n",
      "15 0.00017737620510160923\n",
      "16 0.00018764467677101493\n",
      "17 0.00017025633133016527\n",
      "18 0.00017099226533900946\n",
      "19 0.00018558016745373607\n",
      "20 0.0001763197942636907\n",
      "21 0.00016242009587585926\n",
      "22 0.0001703674060991034\n",
      "23 0.0001775440468918532\n",
      "24 0.00018085751798935235\n",
      "25 0.0001617907255422324\n",
      "26 0.0001549865846754983\n",
      "27 0.0001699251588433981\n",
      "28 0.00015798681124579161\n",
      "29 0.00015899084974080324\n",
      "30 0.0001380971953039989\n",
      "31 0.00014422262029256672\n",
      "32 0.00015196678577922285\n",
      "33 0.00016789969231467694\n",
      "34 0.00013656455848831683\n",
      "35 0.00015324188279919326\n",
      "36 0.0001575347559992224\n",
      "37 0.00015695542970206589\n",
      "38 0.00015927304048091173\n",
      "39 0.0001601842959644273\n",
      "40 0.0001657961111050099\n",
      "41 0.00014282781921792775\n",
      "42 0.00016005404177121818\n",
      "43 0.00016402153414674103\n",
      "44 0.000146209160448052\n",
      "45 0.00014138725236989558\n",
      "46 0.00015973890549503267\n",
      "47 0.00014414927863981575\n",
      "48 0.00014101603301241994\n",
      "49 0.00015729511505924165\n",
      "50 0.00014722230844199657\n"
     ]
    }
   ],
   "source": [
    "lr = 0.001\n",
    "batch_size = 64\n",
    "n_epochs = 50\n",
    "n_batchs = data.train.num_examples // batch_size\n",
    "\n",
    "x, z, y, loss = autoencoder(dims=[28*28, 512, 256, 64], std=0.01)\n",
    "optimizer = tf.train.AdamOptimizer(lr).minimize(loss)\n",
    "\n",
    "\n",
    "S = tf.Session()\n",
    "S.run(tf.global_variables_initializer())\n",
    "\n",
    "\n",
    "for i_epoch in range(1, n_epochs+1):\n",
    "    loss_avg = 0.0\n",
    "    for i_batch in range(1, n_batchs+1):\n",
    "        b, _ = data.train.next_batch(batch_size)\n",
    "        _, loss_val = S.run([optimizer, loss], feed_dict={x: b})\n",
    "        loss_avg = (loss_val / batch_size)\n",
    "    print(i_epoch, loss_avg)\n",
    "    loss_avg = 0.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
